# For test containers
# https://docs.microsoft.com/en-us/azure/devops/pipelines/process/service-containers?view=azure-devops&tabs=yaml#multiple-jobs

###########################################################################
##      RESOURCES # types: pipelines | repositories | containers | packages
###########################################################################
resources:         
  repositories:
  - repository: DockerHubImagesRepo      
    type: GitHub
    endpoint: "wkreaGithub"
    name: wkrea/DockerHubImages
    # ref: 'refs/heads/master'  # ref name to use, defaults to 'refs/heads/master'

    # Inspired by
    # * https://github.com/microsoft/azure-pipelines-yaml/tree/master/design
    ###########################################################################
    ##                              TRIGGERS
    trigger:
      # https://github.com/microsoft/azure-pipelines-yaml/blob/master/design/pipeline-triggers.md
      # https://dzone.com/articles/build-pipeline-triggers-using-azure-devopscicd
      batch: true
      branches:
        include:
        - refs/tags/{test}
        exclude:
        - '*'
      paths:
        exclude:
        - README.md
        - AzureTemplates/*
      tags:
        include:
        - v*
        exclude:
        - v2.0
    ###########################################################################
    ##                              PR's
    pr:
      autoCancel: true
      branches:
        include:
          - bug-fix/*
          - feat/*
          - azure_templates/*
        exclude:
          - master
          - releases/*
      paths:
        exclude:
        - README.md
        - AzureTemplates/*

  containers:
  - container: AlpineMini 
    endpoint: wallaskreaDockerHub
    image: wallaskrea/alpinemini:latest
    env: {}
    ports: "80"
    volumes: ""
    
variables:
  DockerHubAccout: "wallaskreaDockerHub"
  RepositoryName: "wallaskrea" ## equivalent to My DockerHub Organization
  buildContext: "$(Build.SourcesDirectory)"

stages:
  - stage: 
    jobs:
      - job: 
        displayName: Build Images
        pool: 
          vmImage: ubuntu-latest
        workspace:
          clean: all # outputs | resources | all what to clean up before the job runs
        timeoutInMinutes: 30 # how long to run the job before automatically cancelling
        cancelTimeoutInMinutes: 2 # how much time to give 'run always even if cancelled tasks' before killing them

        strategy:
          matrix:
            AlpineMini:
              Dependencia: ""
              ImageName: alpinemini #Dockerfile.alpinemini
              # RepositoryName: wallaskrea ## equivalent to My DockerHub Organization
              BuildContext: Alpine
              Tags: |
                3.10.3
                latest
            
            AlpineMiniGLIB:
              Dependencia: alpinemini
              ImageName: alpineminiglib
              # RepositoryName: wallaskrea
              BuildContext: Alpine
              # DockerHubAccout: wallaskreaDockerHub
              Tags: |
                3.10.3
                latest

        steps:
          - script: echo hello from Linux
          - template: AzureTemplates/DockerHub/BuildImages_steps.yml # Template reference
            parameters:
              ImageName: $( ImageName )
              DockerhubConn: ${ variables.DockerHubAccout }
              repoName: ${ variables.RepositoryName }
              buildContext: $(BuildContext)
              tags: $(Tags)

      - job:
        strategy:
          matrix:
            UbuntuLatest:
              vmImage:  ubuntu-latest
            WinLatest:
              vmImage:  windows-latest
    
        # Idea de como testear una imagen docker luego de construir
        # https://pythonspeed.com/articles/test-your-docker-build/
        displayName: Test on  
        steps:
          #################################################
          # Como Build pipelines Switch based on platform 
          # guiado de aqui https://tinyurl.com/sjtoh4t

          # Windows
          - powershell: |
              $selectedDockerImages = (docker images --all $(ImageName) --quiet);
              if ($selectedDockerImages.Count -gt 0) 
              {
                foreach ($DockerImage in $selectedDockerImages)
                {
                  docker images -q $DockerImage
                  Write-Host ($DockerImage + " image was found") -ForegroundColor Green
                }
              }
              else 
              {
                # show mesage that docker image does not exist
                Write-Host ($(ImageName) + " image not exists")  -ForegroundColor Red
              }
            condition: eq( variables['Agent.OS'], 'Windows_NT' )
            displayName: Test on Windows

          # Ubuntu
          - bash: |
              docker images ls && \
              if [[ "$(docker images -q $(ImageName):$(Tags) 2> /dev/null)" == "" ]]; then
                docker images $(ImageName):$(Tags)
              else
                echo 'Error, $(ImageName) not exits'
              fi
            condition: eq( variables['Agent.OS'], 'Linux' )
            displayName: Test on Linux

          # # macOS
          # - bash: |
          #     export IPADDR=$(ifconfig | grep 'en0' -A3 | tail -n1 | awk '{print $2}')
          #     echo "##vso[task.setvariable variable=IP_ADDR]$IPADDR"
          #   condition: eq( variables['Agent.OS'], 'Darwin' )
          #   displayName: Get IP on macOS

      # - job:
      #   displayName : Push Images to DockerHub
      #   pool:
      #     vmImage: ubuntu-latest
      #   steps:
      #   - template: AzureTemplates/DockerHub/PushImages2DockerHub.yml
      #     parameters:
      #       serviceDockerHub: "" # defaults for any parameters that aren't specified
      #       repository: ""
      #       vmImage: ""
      #       dockerfile: ""
      #       buildContext: ""
      #       tags: ""


# ------------------------------------------------------------- OLD!!!

# resources:
# - repo: self

# pool:
#   vmImage: 'Ubuntu-18.04'

# steps:

# - task: Docker@2
#   displayName: Login to Docker Hub
#   inputs:
#     command: login
#     containerRegistry: wallaskreaDockerHub
# - task: Docker@2
#   displayName: Build and Push
#   inputs:
#     command: buildAndPush
#     repository: wallaskrea/alpinemini
#     Dockerfile: $(Build.SourcesDirectory)/Alpine/Dockerfile.AlpineMini
#     tags: |
#       10.3.1
#       latest
# - script: |
#     docker images 
# - task: Docker@2
#   displayName: Login to wkreaDockerHub
#   inputs:
#     containerRegistry: 'wallaskreaDockerHub'
#     command: 'login'